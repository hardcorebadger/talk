package trefethen.talk.user;

import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import trefethen.talk.chat.ChatManager;
import trefethen.talk.networking.CommunicationServlet;
import trefethen.talk.packet.Packet;
import trefethen.talk.packet.PacketUserStatus;

public class UserManager {
	
	private static String userDataFile = "resources/users.json";
	
	private static HashMap<Integer, User> users = new HashMap<Integer, User>();
	private static HashMap<CommunicationServlet, Integer> connections = new HashMap<CommunicationServlet, Integer>();

	private static int nextID = 0;
	
	/*
	 * Public Interface
	 */
	
	@SuppressWarnings("unchecked")
	public static void loadUsers() {
		System.out.println("USER MANAGER : Loading Users...");
		JSONParser parser = new JSONParser();
		try {
            Object obj = parser.parse(new FileReader(userDataFile));
            JSONObject jsonObject = (JSONObject) obj;
            JSONArray userJSON = (JSONArray) jsonObject.get("Users");
            Iterator<JSONObject> iterator = userJSON.iterator();
            while (iterator.hasNext()) {
            	JSONObject userObject = iterator.next();
            	User u = new User(userObject);                
            	users.put(u.getID(), u);
                nextID = Math.max(nextID, u.getID() + 1); // not the safest but hey you can't delete users so
            }
            System.out.println("USER MANAGER : Users Loaded!");
		} catch (Exception e) {
            e.printStackTrace();
        }
	}
	
	@SuppressWarnings("unchecked")
	public static void saveUsers() {
		System.out.println("USER MANAGER : Saving Users...");
		try {
			JSONArray usersArray = new JSONArray();
			Iterator<User> iterator = users.values().iterator();
			while (iterator.hasNext()) {
				usersArray.add(iterator.next().toJSON());
			}
			JSONObject obj = new JSONObject();
			obj.put("Users", usersArray);
			
			FileWriter file = new FileWriter(userDataFile);
			file.write(obj.toJSONString());
			file.close();
			System.out.println("USER MANAGER : Users Saved!");
		} catch (Exception e) {
            e.printStackTrace();
        }
	}
	
	public static void displayUsers() {
		Iterator<User> iterator = users.values().iterator();
		while (iterator.hasNext()) {
			iterator.next().display();
		}
	}
	
	public static int login(String name, String password, CommunicationServlet s) {
		Iterator<User> iterator = users.values().iterator();
		while (iterator.hasNext()) {
			User u = iterator.next();
			int loginResult = u.attemptLogin(name,  password);
			if (loginResult == 1) {
				// login success
				u.login(s);
				broadcastPacket(new PacketUserStatus(u));
				connections.put(s, u.getID());
				
				return u.getID();
			} else if (loginResult == -1) {
				// wrong password error
				return -1;
			}
			// else keep checking
		}
		// user not found error
		return -2;
	}
	
	public static void logout(CommunicationServlet s) {
		try {
			int userID = connections.get(s);
			System.out.println("USER MANAGER : User Logout: " + userID);
			User u = getUser(s);
			connections.remove(s);
			s.disconnect(false);
			u.logout();
			broadcastPacket(new PacketUserStatus(u));
		} catch (Exception e) {
			// if the user wasn't logged in this isn't needed
		}
	}
	
	public static boolean register(String name, String password) {
		Iterator<User> iterator = users.values().iterator();
		while (iterator.hasNext()) {
			if (iterator.next().getName().equals(name))
				return false;
		}
		User u = new User(name, password, nextID);
		// Add global chat
		u.addChat(0);
		// Create direct chats
		iterator = users.values().iterator();
		while (iterator.hasNext()) {
			ChatManager.createChat(iterator.next(), u);
		}
		users.put(nextID, u);
		nextID++;
		return true;
	}
	
	public static User getUser(int id) {
		return users.get(id);
	}
	
	public static User getUser(CommunicationServlet s) {
		return users.get(connections.get(s));
	}
	
	public static void broadcastPacket(ArrayList<User> broadcast, User except, Packet p) {
		Iterator<User> iterator = broadcast.iterator();
		while (iterator.hasNext()) {
			User u = iterator.next();
			if (u.getID() != except.getID())
				u.sendPacket(p);
		}
	}
	
	public static void broadcastPacket(Packet p) {
		Iterator<CommunicationServlet> iterator = connections.keySet().iterator();
		while (iterator.hasNext()) {
			System.out.println("yew");
			iterator.next().addPacket(p);
		}
	}
		
	/*
	 * Private Helpers
	 */
}
